Log的设计仿照了muduo库的设计，用一个背景线程负责收集日志消息，并写入日志文件，其他业务线程只管往这个
日志线程发送日志消息，这称为“异步日志”。

muduo日志库采用的是双缓冲技术，基本思路是准备两块buffer：A和B。前端负责往bufferA填数据，后端负责将bufferB的数据写入文件。
当bufferA写满之后，交换A和B，让后端将bufferA的数据写入文件，而前端则往bufferB填入新的日志消息，如此往复。

前端不是一条一条的将日志消息分别传给后端，而是将多条日志消息拼成一个大的buffers_传送给后端，这样减少了线程唤醒的频率，降低开销。
另外，为了及时将日志消息写入文件，即便bufferA未满，日志库也会每lushInterval_秒执行一次上述交换写入操作。

与Log相关的类包括FileUtil、LogFile、AsyncLogging、LogStream、Logging。
其中前4个类每一个类都含有一个append函数，Log的设计也是主要围绕这个append函数展开的。

FileUtil是最底层的文件类，封装了Log文件的打开、写入并在类析构的时候关闭文件，底层使用了标准IO，该append函数直接向文件写。

LogFile进一步封装了FileUtil，并设置了一个循环次数，每过一定次数就flush一次。

AsyncLogging是核心，它负责启动一个log线程，专门用来将log写入LogFile，应用了“双缓冲技术”，其实有4个以上的缓冲区，但思想是一样的。
AsyncLogging负责(定时到或被填满时)将缓冲区中的数据写入LogFile中。

LogStream主要用来格式化输出，重载了<<运算符，同时也有自己的一块缓冲区，这里缓冲区的存在是为了缓存一行，把多个<<的结果连成一块。

Logging是对外接口，Logging类内涵一个LogStream对象，主要是为了每次打log的时候在log之前和之后加上固定的格式化的信息，比如打log的行、
文件名等信息。
